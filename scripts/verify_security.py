#!/usr/bin/env python3
"""
Script de v√©rification de s√©curit√© pour NotionClipper Pro
V√©rifie que toutes les am√©liorations de s√©curit√© sont en place
"""

import sys, os
sys.path.insert(0, os.path.abspath('.'))

import subprocess
import json
from pathlib import Path

def print_status(message, status="INFO"):
    """Affiche un message avec un statut color√©"""
    colors = {
        "SUCCESS": "\033[92m",  # Vert
        "ERROR": "\033[91m",    # Rouge
        "WARNING": "\033[93m",  # Jaune
        "INFO": "\033[94m",     # Bleu
    }
    reset = "\033[0m"
    
    color = colors.get(status, colors["INFO"])
    print(f"{color}[{status}]{reset} {message}")

def check_hardcoded_keys():
    """V√©rifie qu'aucune cl√© API n'est hardcod√©e"""
    print_status("üîç V√©rification des cl√©s hardcod√©es...", "INFO")
    
    hardcoded_keys = []
    search_patterns = [
        "f3c96fc1d87f81ae20bb67c5a9e90fc9",
        "IMGBB_API_KEY = '",
        "imgbbApiKey: IMGBB_API_KEY"
    ]
    
    # Chercher dans tous les fichiers
    for root, dirs, files in os.walk("."):
        # Ignorer les dossiers de backup, node_modules, tests et ce script lui-m√™me
        dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['node_modules', 'backup', 'tests']]
        for file in files:
            if file == os.path.basename(__file__):
                continue
            if file.endswith(('.py', '.js', '.jsx', '.ts', '.tsx')):
                file_path = os.path.join(root, file)
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        for pattern in search_patterns:
                            if pattern in content:
                                hardcoded_keys.append(f"{file_path}: {pattern}")
                except Exception:
                    continue
    
    if hardcoded_keys:
        print_status(f"‚ùå {len(hardcoded_keys)} cl√©s hardcod√©es trouv√©es:", "ERROR")
        for key in hardcoded_keys:
            print(f"   - {key}")
        return False
    else:
        print_status("‚úÖ Aucune cl√© hardcod√©e trouv√©e", "SUCCESS")
        return True

def check_security_modules():
    """V√©rifie que les modules de s√©curit√© existent"""
    print_status("üîí V√©rification des modules de s√©curit√©...", "INFO")
    
    required_files = [
        "backend/utils/security.py",
        "backend/utils/config.py",
        "tests/unit/test_security.py"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print_status(f"‚ùå {len(missing_files)} fichiers manquants:", "ERROR")
        for file in missing_files:
            print(f"   - {file}")
        return False
    else:
        print_status("‚úÖ Tous les modules de s√©curit√© pr√©sents", "SUCCESS")
        return True

def check_dependencies():
    """V√©rifie que les d√©pendances de s√©curit√© sont install√©es"""
    print_status("üì¶ V√©rification des d√©pendances...", "INFO")
    
    required_packages = [
        "cryptography",
        "sentry-sdk"
    ]
    
    missing_packages = []
    for package in required_packages:
        try:
            __import__(package.replace("-", "_"))
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print_status(f"‚ùå {len(missing_packages)} packages manquants:", "ERROR")
        for package in missing_packages:
            print(f"   - {package}")
        return False
    else:
        print_status("‚úÖ Toutes les d√©pendances install√©es", "SUCCESS")
        return True

def test_security_module():
    """Teste le module de s√©curit√©"""
    print_status("üß™ Test du module de s√©curit√©...", "INFO")
    
    try:
        from backend.utils.security import SecureStorage, get_secure_api_key, set_secure_api_key
        
        # Test basique
        storage = SecureStorage()
        test_key = "test_security_key"
        test_value = "test_security_value"
        
        # Stocker et r√©cup√©rer
        success = storage.store_secret(test_key, test_value)
        if not success:
            raise Exception("√âchec du stockage")
        
        retrieved_value = storage.get_secret(test_key)
        if retrieved_value != test_value:
            raise Exception("Valeur r√©cup√©r√©e incorrecte")
        
        # Nettoyer
        storage.remove_secret(test_key)
        
        print_status("‚úÖ Module de s√©curit√© fonctionnel", "SUCCESS")
        return True
        
    except Exception as e:
        print_status(f"‚ùå Erreur dans le module de s√©curit√©: {e}", "ERROR")
        return False

def check_api_routes():
    """V√©rifie que les routes API s√©curis√©es sont pr√©sentes"""
    print_status("üåê V√©rification des routes API s√©curis√©es...", "INFO")
    
    config_routes_file = "backend/api/config_routes.py"
    if not os.path.exists(config_routes_file):
        print_status("‚ùå Fichier config_routes.py manquant", "ERROR")
        return False
    
    try:
        with open(config_routes_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        required_routes = [
            "/config/secure-api-key",
            "set_secure_api_key_route",
            "get_secure_api_key_route"
        ]
        
        missing_routes = []
        for route in required_routes:
            if route not in content:
                missing_routes.append(route)
        
        if missing_routes:
            print_status(f"‚ùå {len(missing_routes)} routes manquantes:", "ERROR")
            for route in missing_routes:
                print(f"   - {route}")
            return False
        else:
            print_status("‚úÖ Toutes les routes s√©curis√©es pr√©sentes", "SUCCESS")
            return True
            
    except Exception as e:
        print_status(f"‚ùå Erreur lors de la v√©rification des routes: {e}", "ERROR")
        return False

def check_frontend_updates():
    """V√©rifie que le frontend utilise le stockage s√©curis√©"""
    print_status("üé® V√©rification des mises √† jour frontend...", "INFO")
    
    # V√©rifier OnBoarding.jsx
    onboarding_file = "src/react/src/OnBoarding.jsx"
    if os.path.exists(onboarding_file):
        try:
            with open(onboarding_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            if "f3c96fc1d87f81ae20bb67c5a9e90fc9" in content:
                print_status("‚ùå Cl√© hardcod√©e encore pr√©sente dans OnBoarding.jsx", "ERROR")
                return False
            else:
                print_status("‚úÖ OnBoarding.jsx mis √† jour", "SUCCESS")
        except Exception as e:
            print_status(f"‚ùå Erreur lors de la v√©rification d'OnBoarding.jsx: {e}", "ERROR")
            return False
    
    # V√©rifier config.js
    config_service_file = "src/react/src/services/config.js"
    if os.path.exists(config_service_file):
        try:
            with open(config_service_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            if "secure-api-key" in content:
                print_status("‚úÖ Service de configuration mis √† jour", "SUCCESS")
                return True
            else:
                print_status("‚ùå Service de configuration non mis √† jour", "ERROR")
                return False
        except Exception as e:
            print_status(f"‚ùå Erreur lors de la v√©rification du service de config: {e}", "ERROR")
            return False
    
    return True

def run_tests():
    """Lance les tests de s√©curit√©"""
    print_status("üß™ Lancement des tests de s√©curit√©...", "INFO")
    
    try:
        result = subprocess.run([
            sys.executable, "-m", "pytest", 
            "tests/unit/test_security.py", 
            "-v", "--tb=short"
        ], capture_output=True, text=True, cwd=".")
        
        if result.returncode == 0:
            print_status("‚úÖ Tests de s√©curit√© r√©ussis", "SUCCESS")
            return True
        else:
            print_status("‚ùå Tests de s√©curit√© √©chou√©s:", "ERROR")
            print(result.stdout)
            print(result.stderr)
            return False
            
    except Exception as e:
        print_status(f"‚ùå Erreur lors de l'ex√©cution des tests: {e}", "ERROR")
        return False

def generate_report():
    """G√©n√®re un rapport de s√©curit√©"""
    print_status("üìä G√©n√©ration du rapport de s√©curit√©...", "INFO")
    
    checks = [
        ("Cl√©s hardcod√©es", check_hardcoded_keys),
        ("Modules de s√©curit√©", check_security_modules),
        ("D√©pendances", check_dependencies),
        ("Module de s√©curit√©", test_security_module),
        ("Routes API", check_api_routes),
        ("Frontend", check_frontend_updates),
        ("Tests", run_tests)
    ]
    
    results = {}
    for name, check_func in checks:
        try:
            results[name] = check_func()
        except Exception as e:
            print_status(f"‚ùå Erreur lors de {name}: {e}", "ERROR")
            results[name] = False
    
    # Afficher le rapport
    print("\n" + "="*50)
    print_status("üìã RAPPORT DE S√âCURIT√â", "INFO")
    print("="*50)
    
    passed = 0
    total = len(results)
    
    for name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{name:<25} {status}")
        if result:
            passed += 1
    
    print("-"*50)
    print(f"Total: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print_status("üéâ Toutes les v√©rifications de s√©curit√© sont pass√©es !", "SUCCESS")
        return True
    else:
        print_status(f"‚ö†Ô∏è  {total - passed} v√©rifications ont √©chou√©", "WARNING")
        return False

def main():
    """Fonction principale"""
    print_status("üöÄ V√©rification de s√©curit√© NotionClipper Pro", "INFO")
    print_status("Version: 1.0.0", "INFO")
    print()
    
    success = generate_report()
    
    if success:
        print_status("‚úÖ Installation s√©curis√©e valid√©e !", "SUCCESS")
        sys.exit(0)
    else:
        print_status("‚ùå Des probl√®mes de s√©curit√© ont √©t√© d√©tect√©s", "ERROR")
        sys.exit(1)

if __name__ == "__main__":
    main() 