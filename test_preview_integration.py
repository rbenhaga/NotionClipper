#!/usr/bin/env python3
"""
Script de test pour v√©rifier l'int√©gration de la preview
"""

import requests
import json
import time

API_URL = 'http://localhost:5000/api'

def test_preview_integration():
    """Test complet de l'int√©gration de la preview"""
    print("üîß Test de l'int√©gration de la preview...")
    
    try:
        # 1. V√©rifier la connectivit√©
        print("\n1. Test de connectivit√©...")
        response = requests.get(f"{API_URL}/health")
        if response.status_code == 200:
            print("‚úÖ Backend connect√©")
        else:
            print("‚ùå Backend non connect√©")
            return False
        
        # 2. V√©rifier la configuration
        print("\n2. Test de la configuration...")
        response = requests.get(f"{API_URL}/config")
        if response.status_code == 200:
            config = response.json()
            if config.get('notionToken'):
                print("‚úÖ Token Notion configur√©")
            else:
                print("‚ùå Token Notion non configur√©")
                return False
        else:
            print("‚ùå Impossible de r√©cup√©rer la configuration")
            return False
        
        # 3. V√©rifier la page de preview
        print("\n3. Test de la page de preview...")
        response = requests.get(f"{API_URL}/preview/url")
        if response.status_code == 200:
            data = response.json()
            if data.get('success') and data.get('url'):
                print(f"‚úÖ Page de preview configur√©e: {data['url']}")
            else:
                print("‚ùå Page de preview non configur√©e")
                return False
        else:
            print("‚ùå Erreur lors de la r√©cup√©ration de l'URL de preview")
            return False
        
        # 4. Test de mise √† jour de la preview
        print("\n4. Test de mise √† jour de la preview...")
        test_content = "Test de contenu pour la preview\n\n- Point 1\n- Point 2\n\n**Texte en gras**"
        
        response = requests.post(f"{API_URL}/clipboard/preview", json={
            'content': test_content,
            'contentType': 'text',
            'parseAsMarkdown': True
        })
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print("‚úÖ Preview mise √† jour avec succ√®s")
            else:
                print(f"‚ùå Erreur mise √† jour preview: {data.get('error')}")
                return False
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return False
        
        # 5. Test de cr√©ation de page de preview
        print("\n5. Test de cr√©ation de page de preview...")
        response = requests.post(f"{API_URL}/create-preview-page")
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print(f"‚úÖ Page de preview cr√©√©e: {data.get('pageId')}")
            else:
                print(f"‚ö†Ô∏è Erreur cr√©ation page preview: {data.get('error')}")
        else:
            print(f"‚ö†Ô∏è Erreur HTTP cr√©ation preview: {response.status_code}")
        
        print("\n‚úÖ Tests d'int√©gration termin√©s avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        return False

if __name__ == "__main__":
    test_preview_integration() 